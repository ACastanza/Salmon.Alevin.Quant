#salmon.alevin.quant
#Thu Jan 28 08:30:31 UTC 2021
JVMLevel=
LSID=urn\:lsid\:8080.gpserver.ip-172-31-26-71.ip-172-31-26-71.ec2.internal\:genepatternmodules\:337\:1
author=Anthony S. Castanza;UCSD-MesirovLab
categories=rna-seq;rna-seq;rna-seq
commandLine=<libdir>salmon_alevin_quant.sh -b <Barcodes> -q <Reads> -i <Transcriptome.Index> -c <Chemistry> -t <TgMap> -l <Library.Type> -w <Whitelist> -m <mtRNA> -r <rRNA> -x <dumpMTX> -j <job.cpuCount>
cpuType=any
description=Quantification and analysis of 3' tagged-end single-cell sequencing data using Salmon's Alevin function.<br>\n\nSee\: <a href\="https\://salmon.readthedocs.io/en/latest/alevin.html" target\="_blank">The Alevin Documentation</a>\nfor detailed usage guidelines.
fileFormat=.gz;.tar.gz;gz
job.docker.image=combinelab/salmon\:1.4.0
language=any
name=salmon.alevin.quant
os=any
p10_MODE=
p10_TYPE=TEXT
p10_default_value=FALSE
p10_description=Convert the default binary format of alevin for gene-count matrix into a human readable mtx (matrix market exchange) sparse format. Generates a new output called quants_mat.mtx in the compressed output folder.
p10_fileFormat=
p10_flag=-x
p10_name=dumpMTX
p10_numValues=1..1
p10_optional=
p10_prefix=
p10_prefix_when_specified=
p10_type=java.lang.String
p10_value=TRUE\=true;FALSE\=false
p1_MODE=IN
p1_TYPE=FILE
p1_default_value=
p1_description=Cellular barcodes+UMI file(s), the FASTQ file containing CB+UMI raw sequences. Alevin also supports parsing of data from multiple files as long as the order is the same as in the "Reads" parameter.
p1_fileFormat=.fastq.gz;.fq.gz;.gz;fastq;fq.gz
p1_flag=-b
p1_name=Barcodes
p1_numValues=1+
p1_optional=
p1_prefix=
p1_prefix_when_specified=
p1_type=java.io.File
p1_value=
p2_MODE=IN
p2_TYPE=FILE
p2_default_value=
p2_description=The FASTQ file containing raw read-sequences. Alevin also supports parsing of data from multiple files as long as the order is the same as in the "Barcodes" parameter.
p2_fileFormat=.fastq.gz;.fq.gz;.gz;fastq.gz;fq.gz
p2_flag=-q
p2_name=Reads
p2_numValues=2+
p2_optional=
p2_prefix=
p2_prefix_when_specified=
p2_type=java.io.File
p2_value=
p3_MODE=IN
p3_TYPE=FILE
p3_default_value=
p3_description=An Indexed transcriptome created with `salmon index`.<br>\nMust be in .tar.gz format.
p3_fileFormat=.tar.gz;tar.gz
p3_flag=-i
p3_name=Transcriptome.Index
p3_numValues=1..1
p3_optional=
p3_prefix=
p3_prefix_when_specified=
p3_type=java.io.File
p3_value=
p4_MODE=
p4_TYPE=TEXT
p4_default_value=dropseq
p4_description=The chemistry used by the single-cell sequencing platform.\nDrop-seq, 10x Chromium v2, and 10x Chromium v3 are currently supported.
p4_fileFormat=
p4_flag=-c
p4_name=Chemistry
p4_numValues=1..1
p4_optional=
p4_prefix=
p4_prefix_when_specified=
p4_type=java.lang.String
p4_value=dropseq\=Drop-seq;chromium\=10x Chromium v2;chromiumV3\=10x Chromium v3
p5_MODE=IN
p5_TYPE=FILE
p5_default_value=
p5_description=Transcript to gene map file, a tsv (tab-separated) file ? with no header, containing two columns mapping of each transcript present in the reference to the corresponding gene (the first column is a transcript and the second is the corresponding gene).\n<br>\nAlternatively, a .GTF file can be supplied to automatically create a transcript to gene map.\n<br>
p5_fileFormat=.gtf.gz;gtf;gtf.gz;tsv;txt
p5_flag=-t
p5_name=TgMap
p5_numValues=1..1
p5_optional=
p5_prefix=
p5_prefix_when_specified=
p5_type=java.io.File
p5_value=
p6_MODE=
p6_TYPE=TEXT
p6_default_value=ISR
p6_description=The library type of the RNA-seq. This describes the relative orientation of paired end reads. \n<br>\nThe Alevin authors recommend using ISR (default) for both Drop-seq and Chromium chemistry.
p6_fileFormat=
p6_flag=-l
p6_name=Library.Type
p6_numValues=1..1
p6_optional=
p6_prefix=
p6_prefix_when_specified=
p6_type=java.lang.String
p6_value=ISF\=ISF (Inward, read 1 from the forward strand);ISR\=ISR (Inward, read 1 from the reverse strand);IU\=IU (Inward, Unstranded);OSF\=OSF (Outward, read 1 from the forward strand);OSR\=OSR (Outward, read 1 from the reverse strand);OU\=OU (Outward, Unstranded)
p7_MODE=
p7_TYPE=TEXT
p7_default_value=
p7_description=Optionally explicitly specify the whitelist cellular barcodes to use for cell detection and cellular barcode sequence correction. If not given, alevin generates its own set of putative cellular barcodes.\n\nNote\: Not 10x 724k whitelist\n<br>\nThis flag does not use the biologically known whitelist provided by 10x, instead it?s per experiment level whitelist file e.g. the file generated by cellranger with the name barcodes.tsv.
p7_fileFormat=
p7_flag=-w
p7_name=Whitelist
p7_numValues=0..1
p7_optional=on
p7_prefix=
p7_prefix_when_specified=
p7_type=java.lang.String
p7_value=
p8_MODE=
p8_TYPE=TEXT
p8_default_value=
p8_description=The list of mitochondrial genes which are to be used as a feature for cellular barcode whitelising naive Bayes classification.\n<br>\nNote\: \n\nIt is generally advisable to not use nuclear mitrochondrial genes in this as they can be both up and/or down regulated which might cancel out the usefulness of this feature. Please check issue \#367 in salmon repo to know more about it.\n
p8_fileFormat=
p8_flag=-m
p8_name=mtRNA
p8_numValues=0..1
p8_optional=on
p8_prefix=
p8_prefix_when_specified=
p8_type=java.lang.String
p8_value=
p9_MODE=
p9_TYPE=TEXT
p9_default_value=
p9_description=The list of ribosomal genes which are to be used as a feature for cellular barcode whitelising naive Bayes classification.
p9_fileFormat=
p9_flag=-r
p9_name=rRNA
p9_numValues=0..1
p9_optional=on
p9_prefix=
p9_prefix_when_specified=
p9_type=java.lang.String
p9_value=
privacy=private
quality=development
taskDoc=
taskType=rna-seq
userid=acastanza
version=Alevin 1.4.0
